// 🔧 修正前（問題のあるコード）
/*
// 元のコード（lines 300-310付近）
if (info.cameraReady && myUID < uid && !peerConnections[uid]) {
  console.log("🛰️ カメラ準備完了を検知、接続開始 to:", uid);
  await createConnectionWith(uid);
}
*/

// 🔧 修正後：双方向接続を可能にする
async function initializeConnections() {
  const playersSnap = await get(ref(db, `rooms/${roomCode}/players`));
  const players = playersSnap.val() || {};
  const myUID = auth.currentUser.uid;

  console.log(`🔍 接続可能なプレイヤーを確認中...`);
  
  for (const [uid, info] of Object.entries(players)) {
    if (uid === myUID) continue;
    
    if (info.cameraReady && !peerConnections[uid]) {
      console.log(`🛰️ ${uid}のカメラ準備完了を確認、接続開始`);
      // ⭐ 重要：UIDの大小比較を削除し、すべてのプレイヤーと接続を試行
      await createConnectionWith(uid);
      // 接続間隔を空けて安定性を向上
      await new Promise(resolve => setTimeout(resolve, 300));
    }
  }
}

// 🔧 修正後：listenForCameraReadyPlayers関数も更新
function listenForCameraReadyPlayers() {
  const myUID = auth.currentUser.uid;
  const playersRef = ref(db, `rooms/${roomCode}/players`);

  onValue(playersRef, async (snapshot) => {
    const players = snapshot.val() || {};
    for (const [uid, info] of Object.entries(players)) {
      if (uid === myUID) continue;

      // ⭐ 重要：UIDの大小比較を削除
      if (info.cameraReady && !peerConnections[uid]) {
        console.log("🛰️ カメラ準備完了を検知、接続開始 to:", uid);
        await createConnectionWith(uid);
        // 同時接続を避けるための間隔
        await new Promise(resolve => setTimeout(resolve, 300));
      }
    }
  });
}

// 🔧 startCameraAndConnect関数内の該当部分も修正
async function startCameraAndConnect() {
  if (cameraStarted) {
    console.log("📷 カメラは既に起動しています");
    return;
  }
  cameraStarted = true;
  
  try {
    await cleanupWebRTCConnections();
    
    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });

    const videoGrid = document.getElementById("videoGrid");
    videoGrid.style.display = "flex";

    const video = document.createElement("video");
    video.srcObject = localStream;
    video.autoplay = true;
    video.playsInline = true;
    video.muted = true;
    video.style.width = "200px";
    video.style.height = "150px";
    video.style.margin = "10px";
    videoGrid.appendChild(video);
    await video.play().catch(e => console.warn("ローカル再生エラー:", e));

    console.log("📷 ローカルカメラ取得完了");

    await set(ref(db, `rooms/${roomCode}/players/${auth.currentUser.uid}/cameraReady`), true);

    // ⭐ 修正：UIDの大小比較なしで全プレイヤーと接続を試行
    await initializeConnections();

    listenForSignals();
    listenForCameraReadyPlayers();
    
  } catch (err) {
    console.error("カメラ取得エラー:", err);
    alert("カメラの許可が必要です。他のアプリを閉じてください。");
  }
}
