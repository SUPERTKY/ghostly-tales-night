// 🔍 デバッグ用：WebRTC接続状態を確認するコード
// ブラウザのコンソールで実行してください

function debugWebRTCStatus() {
  console.log("=== WebRTC デバッグ情報 ===");
  
  // 1. 基本状態の確認
  console.log("🔍 基本状態:");
  console.log("- currentUserId:", currentUserId);
  console.log("- roomCode:", roomCode);
  console.log("- cameraStarted:", cameraStarted);
  console.log("- localStream:", localStream);
  
  // 2. PeerConnection状態
  console.log("\n🔗 PeerConnection状態:");
  console.log("- peerConnections:", Object.keys(peerConnections));
  
  Object.entries(peerConnections).forEach(([uid, pc]) => {
    console.log(`  ${uid}:`);
    console.log(`    - connectionState: ${pc.connectionState}`);
    console.log(`    - iceConnectionState: ${pc.iceConnectionState}`);
    console.log(`    - signalingState: ${pc.signalingState}`);
    console.log(`    - localDescription: ${pc.localDescription ? 'あり' : 'なし'}`);
    console.log(`    - remoteDescription: ${pc.remoteDescription ? 'あり' : 'なし'}`);
  });
  
  // 3. ビデオ要素の確認
  console.log("\n📺 ビデオ要素:");
  const videos = document.querySelectorAll('video');
  console.log(`- 総ビデオ要素数: ${videos.length}`);
  
  videos.forEach((video, index) => {
    const userId = video.getAttribute('data-user-id');
    console.log(`  ビデオ${index + 1}:`);
    console.log(`    - data-user-id: ${userId || '未設定(ローカル)'}`);
    console.log(`    - srcObject: ${video.srcObject ? 'あり' : 'なし'}`);
    console.log(`    - videoWidth: ${video.videoWidth}`);
    console.log(`    - videoHeight: ${video.videoHeight}`);
    console.log(`    - readyState: ${video.readyState}`);
    console.log(`    - paused: ${video.paused}`);
    
    if (video.srcObject) {
      const tracks = video.srcObject.getTracks();
      console.log(`    - トラック数: ${tracks.length}`);
      tracks.forEach((track, i) => {
        console.log(`      トラック${i + 1}: ${track.kind} - enabled: ${track.enabled} - state: ${track.readyState}`);
      });
    }
  });
  
  // 4. Firebase上のプレイヤー状態確認（非同期）
  console.log("\n🔥 Firebase プレイヤー状態確認中...");
  get(ref(db, `rooms/${roomCode}/players`)).then(snapshot => {
    if (snapshot.exists()) {
      const players = snapshot.val();
      console.log("Firebase プレイヤー状態:");
      Object.entries(players).forEach(([uid, data]) => {
        console.log(`  ${uid}:`);
        console.log(`    - name: ${data.name}`);
        console.log(`    - cameraReady: ${data.cameraReady}`);
        console.log(`    - ready: ${data.ready}`);
        console.log(`    - lastSeen: ${data.lastSeen ? new Date(data.lastSeen).toLocaleTimeString() : '未設定'}`);
      });
    }
  });
  
  // 5. シグナリングデータの確認
  console.log("\n📡 シグナリングデータ確認中...");
  get(ref(db, `rooms/${roomCode}/signals`)).then(snapshot => {
    if (snapshot.exists()) {
      const signals = snapshot.val();
      console.log("シグナリングデータ:");
      Object.entries(signals).forEach(([fromUID, toMap]) => {
        Object.entries(toMap).forEach(([toUID, data]) => {
          console.log(`  ${fromUID} → ${toUID}:`);
          console.log(`    - offer: ${data.offer ? 'あり' : 'なし'}`);
          console.log(`    - answer: ${data.answer ? 'あり' : 'なし'}`);
          console.log(`    - candidates: ${data.candidates ? Object.keys(data.candidates).length + '個' : 'なし'}`);
        });
      });
    } else {
      console.log("シグナリングデータなし");
    }
  });
}

// コンソールで実行
debugWebRTCStatus();
